Email to Excel

gmail to python
https://codehandbook.org/how-to-read-email-from-gmail-using-python/

python adds to csv file

raspi updates csv file in onedrive

rpi to onedrive
https://jarrodstech.net/how-to-raspberry-pi-onedrive-sync/

rclone sync works as expected.

I need to see if gmail to python will work as expected.

smtplib module

can be used to send mail to any internet machine with an smtp or esmtp listener daemon

https://docs.python.org/3.7/library/smtplib.html?highlight=smtplib#module-smtplib

imaplib module

defines three classes, IMAP4, IMAP4_SSL and IMAP4_stream, which encapsulate a connection to an IMAP4 server and implement a large subset of the IMAP4rev1 client protocol as defined in RFC 2060. It is backward compatible with IMAP4 (RFC 1730) servers, but note that the STATUS command is not supported in IMAP4

https://docs.python.org/3.7/library/imaplib.html?highlight=imaplib#module-imaplib

email package

This package analyzes email content

https://docs.python.org/3.7/library/email.html?highlight=email#module-email

I need smtplib module to listen to emails

https://www.tutorialspoint.com/python/python_sending_email.htm

Use imap.gmail.com for incoming messages.
A different one is used for outgoing messages.
https://www.thepythoncode.com/article/reading-emails-in-python

List of imap:
https://www.systoolsgroup.com/imap/

specifies the authentication, server, port, and company for each each service used

Must enable IMAP from account settings in Gmail

Must enable connection to risky 3rd party apps.

10/28/2020

I need to determine the structure of an email.

email package represents email messages in an object model
this is defined in the message submodule
email.message
https://docs.python.org/3.7/library/email.message.html

imap = imaplib.IMAP4_SSL("imap.gmail.com")
res, msg = imap.fetch(str(i), "(RFC822)")

RFC822
is a email message format consisting header fields
The RFC 822 message format is the basis for other message formats.

The following is an example of RFC 822:

From: someone@example.com
To: someone_else@example.com
Subject: An RFC 822 formatted message

This is the plain text body of the message. Note the blank line
between the header information and the body of the message.

The following is an example of RFC 850:

From: someone@<yourcompany>.com
Subject: A basic RFC 850 formatted message
Newsgroups: comp.<yourcompany>.test

The body of this message is plain text. Note the blank line
between the header information and the body of the message.

The difference is that there is no "to" as it seems to be a mass email protocol so that people cannot see other people's emails.
The other difference is the Newsgroups header which specifies the company that this email is received from.

https://docs.microsoft.com/en-us/previous-versions/office/developer/exchange-server-2010/aa493918(v=exchg.140)

I think I'm going to use this to parse through the html for the right text
https://pypi.org/project/html2text/

this works as intended. This saves me some time and energy needing to parse through the html. I can focus on parsing through the actual string instead

The reason I want to do it this way is because the email stylings might change and I don't want the stylings be the reason why the code doesn't work.

1. rpi logs into email account using imap or POP module
2. rpi takes the appropriate strings from new email messages.
	- I might want to store the number of the email to start on and change it as the number increases.
	- From the range of old total to the new total messages, get the contents of those emails
3. Put the content of those emails into a csv file.
	- Uses the csv python module
4. Upload and update the csv to onedrive using rclone sync command.
	- Have the excel sheet sort
5. Create a chron job to run this script on RPI at regular intervals.
6. ???
7. Profit

I can rely on a database but it's overkill for dealing with the amount of data being used.

Because new rows will be appended to the file, simply deleting old rows from the csv will be good enough since the information will be synced to onedrive. This can be done manually by the end user rather easily.

I'll need to include instructions for manual deletions and viewing on excel:

1. To see the most recent data: use Ctrl+down arrow key.
2. To delete data from a specific date up to all previous occurrences:
	a. Select the row.
	b. Press Ctrl+Shift+Up
	c. Right click on selected data and choose delete rows.

I don't need a cloud storage solution. I would like a VM solution but... those cost a lot of money. Maintaining a single RPI is worth not paying for a managed VM service.

11/2/2020

Priorities have changed.

1. List of Data sources
	# data source must be able to come from anywhere
2. Scrape those data sources for businesses
	# no need to scrape those data sources since they should have the ability to export to an excel sheet
3. From the excel sheet, search on Google and click the first result (or maybe the first three)
	# I'm going to use the Chrome driver and selenium for this part... or... I think I'm just going to use selenium. I don't think I'll scrapy for this project because there is a lot web browsing.
	# Might want to use the top three links actually.
4. Click the "contact us" hyperlink.
5. Scrape as many emails as possible
6. Return a list of emails for one cell associated with each business.

This is meant to be a tool that anyone can use.

https://www.elicense.ct.gov/lookup/licenselookup.aspx go to generate roster
https://www.concord-sots.ct.gov/CONCORD/online?sn=PublicInquiry&eid=9740 for company names

tj@scalzo.com to sign in to onedrive, check shared

I'm going to need to use py-installer to wrap up the script.
I'll need to learn how to use py-installer.

I've decided to use selenium since there is actually a lot of headless browsing that I'll need to do. It will work essentially the same as scrapy anyways.

I've decided to use duckduckgo as the default search engine because it brings up more relevant search results.


selenium will use duckduckgo to search the top result of every architect business


https://github.com/SeleniumHQ/selenium/tree/trunk/py
https://www.selenium.dev/selenium/docs/api/py/api.html

11/3/2020

Priorities have changed. I'm off the project with the Scalzo group now.
I'm going to complete this project anyways.
The result will be a program that uses a GUI to display options

The end product is a GUI that will be easy for anyone to use to scrape from the web easily for a column of searches in an excel sheet.

Simple Lead Generator

On the GUI, I need the following setting.

1. Detect excel sheets.
2. Choose which excel sheet to use.
3. Specify addendums/localization such as a state or county for businesses.
4. Number of top search results to scrape.
5. Checkbox what to scrape for:
	emails
	phone numbers
	contact url
6. Scrape the internet button: These results will appear in the open excel sheet.

Make it so that when the program is being run, the setting cannot be edited.

I need to figure out how to use pysimplegui, which shouldn't be a huge problem.

This project will be renamed to Simple Lead Generator.

What to make this as modular as possible.
Fortunately, I've actually coded the bulk of the searching part. I just need to focus on creating the GUI.
I need to figure out how to use pysimpleGUI. I'm kinda tired so I think I'll finish this tomorrow.

TODO:
- build the GUI using pysimpleGUI
	- settings
	- run button
- connect Detect excel sheets GUI element to excel
- connect the GUI elements to each other as settings
- pipe code into the GUI elements
- build executable using the pyinstaller package